require('dotenv').config();
const { ethers } = require('ethers');
const Web3 = require('web3');

// CONFIG
const RPC = 'https://bsc-dataseed.binance.org/';
const provider = new ethers.JsonRpcProvider(RPC);
const web3 = new Web3(RPC);

// Load wallets from .env (up to 10,000)
const PRIVATES = Array.from({ length: 10000 }, (_, i) => process.env[`WALLET${i + 1}`]).filter(Boolean);

// Contract addresses
const TIFFY = '0xE488253D...'; // Replace
const WBNB = '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c';
const ROUTER = '0x10ED43C718714eb63d5aA57B78B54704E256024E';
const SIDE_CONTRACT = '0x2a234d5C...'; // Replace
const ADMIN_OWNER = '0x2a234d5C...'; // Replace
const POOL_ADDRESS = '0x1305302e...'; // Replace

// ABIs
const tiffyAbi = ['function approve(address,uint256) external returns(bool)', 'function balanceOf(address) view returns(uint256)'];
const wbnbAbi = ['function approve(address,uint256) external returns(bool)', 'function balanceOf(address) view returns(uint256)'];
const routerAbi = ['function getAmountOut(uint,uint,uint) view returns(uint)', 'function swapExactTokensForTokens(uint,uint,address[],address,uint) external returns(uint[])'];
const sideAbi = ['function feedPool(uint256) external', 'function setExempt(address[],bool) external'];

// Contract instances
const tiffy = new ethers.Contract(TIFFY, tiffyAbi, provider);
const wbnb = new ethers.Contract(WBNB, wbnbAbi, provider);
const router = new ethers.Contract(ROUTER, routerAbi, provider);
const side = new ethers.Contract(SIDE_CONTRACT, sideAbi, provider);

// GAS & SAFETY
const MAX_SLIPPAGE = 500; // 5%
const MIN_GAS_PRICE = ethers.parseUnits('0.1', 'gwei');
const MAX_GAS_PRICE = ethers.parseUnits('5', 'gwei');
const GAS_LIMIT = 300000;
const MIN_DAILY_NET = 40;

// MAIN TRADE LOOP
async function runTrade(wallet, tradeAmt = 100, count = 1) {
  const signer = new ethers.Wallet(wallet, provider);
  const tx = { gasPrice: MIN_GAS_PRICE, gasLimit: GAS_LIMIT };
  console.log(`Starting trade on ${signer.address}...`);

  let totalNet = 0;

  const gasPrice = await provider.getFeeData().gasPrice;
  if (gasPrice > MAX_GAS_PRICE) {
    console.log('Gas > 5 Gwei, pausing...');
    return;
  }
  tx.gasPrice = ethers.parseUnits(Math.min(gasPrice / 1e9, 5).toString(), 'gwei');

  const balance = await tiffy.balanceOf(signer.address);
  if (balance < ethers.parseUnits(tradeAmt.toString(), 18)) {
    console.log(`Low TIFFY balance: ${ethers.formatUnits(balance, 18)}`);
    return;
  }

  const tRes = await tiffy.balanceOf(POOL_ADDRESS);
  const wRes = await wbnb.balanceOf(POOL_ADDRESS);
  const out = await router.getAmountOut(ethers.parseUnits(tradeAmt.toString(), 18), tRes, wRes);
  const minOut = out.mul(10000 - MAX_SLIPPAGE).div(10000);
  if (out.lte(ethers.parseUnits('0.0001', 18))) {
    console.log('Output too low, skipping...');
    return;
  }

  try {
    await (await tiffy.connect(signer).approve(ROUTER, ethers.parseUnits(tradeAmt.toString(), 18), tx)).wait();
    const path = [TIFFY, WBNB];
    const res = await router.connect(signer).swapExactTokensForTokens(
      ethers.parseUnits(tradeAmt.toString(), 18),
      minOut,
      path,
      signer.address,
      Math.floor(Date.now() / 1000) + 300,
      tx
    );
    console.log(`Trade: ${res.hash}`);
    totalNet += tradeAmt * 16.3;
  } catch (e) {
    console.log(`Skip trade: ${e.reason || e.message}`);
  }

  try {
    const balance = await tiffy.balanceOf(signer.address);
    if (balance >= ethers.parseUnits('0.99', 18)) {
      await (await tiffy.connect(signer).approve(SIDE_CONTRACT, ethers.parseUnits('0.99', 18), tx)).wait();
      await (await side.connect(signer).feedPool(ethers.parseUnits('0.99', 18), tx)).wait();
      console.log(`Fed pool: 0.99 TIFFY from ${signer.address}`);
    }
  } catch (e) {
    console.log(`Pool feed failed: ${e.reason || e.message}`);
  }

  if (totalNet < MIN_DAILY_NET) {
    console.log(`Net ${totalNet} USD < $40, stopping...`);
    process.exit(1);
  }
}

// GAS SWAP
async function swapToGas(signer) {
  const amt = ethers.parseUnits('0.02', 18);
  const balance = await tiffy.balanceOf(signer.address);
  if (balance < amt) {
    console.log(`Low TIFFY for gas swap: ${ethers.formatUnits(balance, 18)}`);
    return;
  }
  const out = await router.getAmountOut(amt, await tiffy.balanceOf(POOL_ADDRESS), await wbnb.balanceOf(POOL_ADDRESS));
  const minOut = out.mul(10000 - MAX_SLIPPAGE).div(10000);
  try {
    await (await tiffy.connect(signer).approve(ROUTER, amt, { gasLimit: GAS_LIMIT })).wait();
    const path = [TIFFY, WBNB];
    const res = await router.connect(signer).swapExactTokensForTokens(
      amt,
      minOut,
      path,
      signer.address,
      Math.floor(Date.now() / 1000) + 300,
      { gasLimit: GAS_LIMIT }
    );
    console.log(`Gas swap: ${res.hash}`);
  } catch (e) {
    console.log(`Gas swap failed: ${e.reason || e.message}`);
  }
}

// EXEMPT WALLETS
async function exemptWallets(wallets) {
  const signer = new ethers.Wallet(process.env.ADMIN_PRIVATE, provider);
  try {
    await (await side.connect(signer).setExempt(wallets, true, { gasPrice: MIN_GAS_PRICE, gasLimit: 2500000 })).wait();
    console.log(`Exempted ${wallets.length} wallets`);
  } catch (e) {
    console.log(`Exempt failed: ${e.reason || e.message}`);
  }
}

// MAIN
async function start() {
  console.log('Starting TIFFY trader...');
  for (const key of PRIVATES) {
    await runTrade(key);
    await swapToGas(key);
  }
  console.log('Daily cycle done.');

  // Exempt 10,000 wallets (Day 2)
  const newWallets = require('./wallet-addresses.json'); // Load from wallet-creator.js
  if (new Date().getDate() === 2) {
    const batchSize = 100;
    for (let i = 0; i < newWallets.length; i += batchSize) {
      await exemptWallets(newWallets.slice(i, i + batchSize));
    }
  }
}

// RUN
start().catch(e => console.error(`Error: ${e.reason || e.message}`));

// CRON (uncomment for 4-hour auto-run)
// setInterval(start, 4 * 60 * 60 * 1000);
